#!/usr/bin/python
"""
The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
   10: 1,2,5,10
   15: 1,3,5,15
   21: 1,3,7,21
   28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""

import logging
import math
import tools
import functools
import itertools


def triangle(n):
    return n * (n + 1) // 2
    # return sum(range(n + 1))


def divisors(n):
    # an odd number only has odd divisors
    #   9: 3
    #  21: 3, 7
    #  25: 5
    # so if we start with 1, we only need to check
    # every second 1, 3, 5, ...
    step = 2 if n % 2 else 1
    # limit to sqrt(n), we will yield divisor and result
    # on every test
    l = int(math.sqrt(n)) + 1
    for i in range(1, l, step):
        if n % i == 0:
            yield i
            yield n // i


def solution1():
    for i in itertools.count(3):
        t = triangle(i)
        c = len(set(divisors(t)))
        logging.debug('%10d: %10d %10d', i, t, c)
        if c > 500:
            print(i, t)
            return


def solution2():
    table = list(tools.primes_below(65500))
    for i in itertools.count(3):
        t = triangle(i)
        f = tools.factorint(t, table=table)
        logging.debug('i: %10d  t: %10d  f: %s', i, t, f)
        c = functools.reduce(
            lambda x, y: x * y,
            [x + 1 for x in f.values()]
        )
        if c > 500:
            print(i, t)
            return


assert(triangle(7) == 28)
assert(len(set(divisors(28))) == 6)


logging.basicConfig(level=logging.INFO)
solution2()
